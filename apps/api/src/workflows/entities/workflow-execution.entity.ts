import { WorkflowExecutionStatus } from '../constants/workflow.constants';

export class WorkflowExecutionEntity {
  constructor(
    public readonly id: string,
    public readonly status: WorkflowExecutionStatus,
    public readonly triggeredBy: string,
    public readonly startTime: Date,
    public readonly endTime: Date | null,
    public readonly inputData: Record<string, any> | null,
    public readonly outputData: Record<string, any> | null,
    public readonly durationMs: number | null,
    public readonly leadId: string | null,
    public readonly workflowId: string,
    public readonly companyId: string,
    public readonly errorMessage?: string,
  ) {}

  // Business logic methods
  public get isCompleted(): boolean {
    return this.status === WorkflowExecutionStatus.SUCCESS || 
           this.status === WorkflowExecutionStatus.FAILED ||
           this.status === WorkflowExecutionStatus.TIMEOUT ||
           this.status === WorkflowExecutionStatus.CANCELLED;
  }

  public get isRunning(): boolean {
    return this.status === WorkflowExecutionStatus.STARTED || 
           this.status === WorkflowExecutionStatus.RUNNING;
  }

  public get isSuccessful(): boolean {
    return this.status === WorkflowExecutionStatus.SUCCESS;
  }

  public get isFailed(): boolean {
    return this.status === WorkflowExecutionStatus.FAILED || 
           this.status === WorkflowExecutionStatus.TIMEOUT;
  }

  public get durationSeconds(): number | null {
    return this.durationMs ? Math.round(this.durationMs / 1000) : null;
  }

  public get hasError(): boolean {
    return this.errorMessage !== undefined && this.errorMessage.length > 0;
  }

  public get executionTime(): string {
    if (!this.durationMs) return 'N/A';
    
    const seconds = Math.floor(this.durationMs / 1000);
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    
    if (minutes > 0) {
      return `${minutes}m ${remainingSeconds}s`;
    }
    return `${remainingSeconds}s`;
  }

  public canBeRetried(): boolean {
    return this.isFailed && this.status !== WorkflowExecutionStatus.TIMEOUT;
  }

  public static create(
    workflowId: string,
    companyId: string,
    triggeredBy: string,
    inputData: Record<string, any>,
    leadId?: string,
  ): WorkflowExecutionEntity {
    return new WorkflowExecutionEntity(
      '', // ID will be generated by the database
      WorkflowExecutionStatus.STARTED,
      triggeredBy,
      new Date(),
      null,
      inputData,
      null,
      null,
      leadId || null,
      workflowId,
      companyId,
    );
  }

  public withStatus(
    status: WorkflowExecutionStatus,
    outputData?: Record<string, any>,
    errorMessage?: string,
  ): WorkflowExecutionEntity {
    const endTime = this.isCompleted ? new Date() : this.endTime;
    const durationMs = endTime && this.startTime 
      ? endTime.getTime() - this.startTime.getTime() 
      : this.durationMs;

    return new WorkflowExecutionEntity(
      this.id,
      status,
      this.triggeredBy,
      this.startTime,
      endTime,
      this.inputData,
      outputData || this.outputData,
      durationMs,
      this.leadId,
      this.workflowId,
      this.companyId,
      errorMessage,
    );
  }
} 