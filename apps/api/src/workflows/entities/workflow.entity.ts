import { WorkflowType } from '../constants/workflow.constants';

export interface WorkflowExecutionSummary {
  id: string;
  status: string;
  startTime: Date;
  endTime?: Date;
  durationMs?: number;
  triggeredBy: string;
}

export class WorkflowEntity {
  constructor(
    public readonly id: string,
    public readonly name: string,
    public readonly type: WorkflowType,
    public readonly n8nWorkflowId: string,
    public readonly companyId: string,
    public readonly createdAt: Date,
    public readonly updatedAt: Date,
    public readonly executionCount?: number,
    public readonly lastExecution?: WorkflowExecutionSummary,
  ) {}

  // Business logic methods
  public get isActive(): boolean {
    return this.executionCount !== undefined && this.executionCount > 0;
  }

  public get typeDescription(): string {
    const descriptions = {
      [WorkflowType.TARGET_AUDIENCE_TRANSLATOR]: 'Target Audience Translator',
      [WorkflowType.LEAD_ENRICHMENT]: 'Lead Enrichment',
      [WorkflowType.EMAIL_SEQUENCE]: 'Email Sequence',
      [WorkflowType.LEAD_ROUTING]: 'Lead Routing',
    };
    return descriptions[this.type];
  }

  public get canBeDeleted(): boolean {
    // Can be deleted if no recent executions or if all executions are old or completed long ago
    if (!this.lastExecution) return true;
    if (!this.lastExecution.endTime) return false; // running or incomplete execution
    return Date.now() - this.lastExecution.endTime.getTime() > 24 * 60 * 60 * 1000; // 24 hours
  }

  public get isTargetAudienceTranslatorWorkflow(): boolean {
    return this.type === WorkflowType.TARGET_AUDIENCE_TRANSLATOR;
  }

  public get isEnrichmentWorkflow(): boolean {
    return this.type === WorkflowType.LEAD_ENRICHMENT;
  }

  public get isEmailSequenceWorkflow(): boolean {
    return this.type === WorkflowType.EMAIL_SEQUENCE;
  }

  public get isRoutingWorkflow(): boolean {
    return this.type === WorkflowType.LEAD_ROUTING;
  }

  public canExecuteWithInput(inputData: Record<string, any>): boolean {
    // Basic validation based on workflow type
    switch (this.type) {
      case WorkflowType.TARGET_AUDIENCE_TRANSLATOR:
        return inputData.targetAudienceData !== undefined || inputData.inputFormat !== undefined;
      case WorkflowType.LEAD_ENRICHMENT:
        return inputData.leadId !== undefined || inputData.email !== undefined;
      case WorkflowType.EMAIL_SEQUENCE:
        return inputData.campaignId !== undefined && inputData.leadId !== undefined;
      case WorkflowType.LEAD_ROUTING:
        return inputData.leadId !== undefined;
      default:
        return true;
    }
  }

  public static create(
    name: string,
    type: WorkflowType,
    n8nWorkflowId: string,
    companyId: string,
  ): WorkflowEntity {
    return new WorkflowEntity(
      '', // ID will be generated by the database
      name,
      type,
      n8nWorkflowId,
      companyId,
      new Date(),
      new Date(),
    );
  }

  public withExecutionSummary(
    executionCount: number,
    lastExecution?: WorkflowExecutionSummary,
  ): WorkflowEntity {
    return new WorkflowEntity(
      this.id,
      this.name,
      this.type,
      this.n8nWorkflowId,
      this.companyId,
      this.createdAt,
      this.updatedAt,
      executionCount,
      lastExecution,
    );
  }
} 