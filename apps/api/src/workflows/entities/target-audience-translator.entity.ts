import { InputFormat } from '../dto/target-audience-translator.dto';

export interface EnrichmentField {
  name: string;
  type: 'REQUIRED' | 'OPTIONAL' | 'CONDITIONAL';
  description?: string;
  example?: string;
}

export interface EnrichmentSchema {
  requiredFields: EnrichmentField[];
  optionalFields: EnrichmentField[];
  conditionalFields?: EnrichmentField[];
}

export interface GeneratedLead {
  fullName?: string;
  jobTitle?: string;
  companyName?: string;
  location?: string;
  linkedinUrl?: string;
  email?: string;
  additionalData?: Record<string, any>;
}

export interface InterpretedCriteria {
  jobTitles?: string[];
  industries?: string[];
  location?: string;
  companySize?: string;
  fundingStatus?: string;
  additionalCriteria?: Record<string, any>;
}

export class TargetAudienceTranslatorEntity {
  constructor(
    public readonly id: string,
    public readonly inputFormat: InputFormat,
    public readonly targetAudienceData: string,
    public readonly structuredData: Record<string, any> | null,
    public readonly config: Record<string, any> | null,
    public readonly leads: GeneratedLead[] | null,
    public readonly enrichmentSchema: EnrichmentSchema | null,
    public readonly interpretedCriteria: InterpretedCriteria | null,
    public readonly reasoning: string | null,
    public readonly confidence: number | null,
    public readonly status: string,
    public readonly errorMessage: string | null,
    public readonly companyId: string,
    public readonly createdBy: string,
    public readonly createdAt: Date,
    public readonly updatedAt: Date,
  ) {}

  // Business logic methods
  public get isCompleted(): boolean {
    return this.status === 'SUCCESS' || this.status === 'FAILED';
  }

  public get isSuccessful(): boolean {
    return this.status === 'SUCCESS';
  }

  public get isFailed(): boolean {
    return this.status === 'FAILED';
  }

  public get hasLeads(): boolean {
    return this.leads !== null && this.leads.length > 0;
  }

  public get hasEnrichmentSchema(): boolean {
    return this.enrichmentSchema !== null;
  }

  public get leadCount(): number {
    return this.leads?.length || 0;
  }

  public get requiredFieldsCount(): number {
    return this.enrichmentSchema?.requiredFields.length || 0;
  }

  public get optionalFieldsCount(): number {
    return this.enrichmentSchema?.optionalFields.length || 0;
  }

  public static create(
    inputFormat: InputFormat,
    targetAudienceData: string,
    structuredData: Record<string, any> | null,
    config: Record<string, any> | null,
    companyId: string,
    createdBy: string,
  ): TargetAudienceTranslatorEntity {
    return new TargetAudienceTranslatorEntity(
      '', // ID will be generated by the database
      inputFormat,
      targetAudienceData,
      structuredData,
      config,
      null,
      null,
      null,
      null,
      null,
      'PENDING',
      null,
      companyId,
      createdBy,
      new Date(),
      new Date(),
    );
  }

  public withStatus(
    status: string,
    leads?: GeneratedLead[],
    enrichmentSchema?: EnrichmentSchema,
    interpretedCriteria?: InterpretedCriteria,
    reasoning?: string,
    confidence?: number,
    errorMessage?: string,
  ): TargetAudienceTranslatorEntity {
    return new TargetAudienceTranslatorEntity(
      this.id,
      this.inputFormat,
      this.targetAudienceData,
      this.structuredData,
      this.config,
      leads || this.leads,
      enrichmentSchema || this.enrichmentSchema,
      interpretedCriteria || this.interpretedCriteria,
      reasoning || this.reasoning,
      confidence || this.confidence,
      status,
      errorMessage || this.errorMessage,
      this.companyId,
      this.createdBy,
      this.createdAt,
      new Date(),
    );
  }

  public withResults(
    leads: GeneratedLead[],
    enrichmentSchema: EnrichmentSchema,
    interpretedCriteria: InterpretedCriteria,
    reasoning?: string,
    confidence?: number,
  ): TargetAudienceTranslatorEntity {
    return this.withStatus(
      'SUCCESS',
      leads,
      enrichmentSchema,
      interpretedCriteria,
      reasoning,
      confidence,
    );
  }

  public withError(errorMessage: string): TargetAudienceTranslatorEntity {
    return this.withStatus('FAILED', undefined, undefined, undefined, undefined, undefined, errorMessage);
  }
} 