export class AdminActionLogEntity {
  constructor(
    public readonly id: string,
    public readonly action: string,
    public readonly targetType: string,
    public readonly targetId: string,
    public readonly details: Record<string, any> | null,
    public readonly performedBy: string,
    public readonly timestamp: Date,
  ) {}

  // Business logic methods
  public get isCriticalAction(): boolean {
    const criticalActions = [
      'COMPANY_SUSPEND',
      'COMPANY_DELETE',
      'USER_BAN',
      'PLAN_CHANGE',
      'SYSTEM_NOTIFICATION',
    ];
    return criticalActions.includes(this.action);
  }

  public get actionCategory(): 'company' | 'user' | 'plan' | 'system' | 'other' {
    if (this.action.startsWith('COMPANY_')) return 'company';
    if (this.action.startsWith('USER_')) return 'user';
    if (this.action.startsWith('PLAN_')) return 'plan';
    if (this.action.startsWith('SYSTEM_')) return 'system';
    return 'other';
  }

  public static create(
    action: string,
    targetType: string,
    targetId: string,
    performedBy: string,
    details?: Record<string, any>,
  ): AdminActionLogEntity {
    return new AdminActionLogEntity(
      '', // ID will be generated by database
      action,
      targetType,
      targetId,
      details || null,
      performedBy,
      new Date(),
    );
  }

  public withDetails(details: Record<string, any>): AdminActionLogEntity {
    return new AdminActionLogEntity(
      this.id,
      this.action,
      this.targetType,
      this.targetId,
      details,
      this.performedBy,
      this.timestamp,
    );
  }
}

// Standard admin action types for consistency
export enum AdminActionType {
  // Company actions
  COMPANY_VIEW = 'COMPANY_VIEW',
  COMPANY_STATUS_UPDATE = 'COMPANY_STATUS_UPDATE',
  COMPANY_PLAN_CHANGE = 'COMPANY_PLAN_CHANGE',
  COMPANY_SUSPEND = 'COMPANY_SUSPEND',
  COMPANY_ACTIVATE = 'COMPANY_ACTIVATE',
  COMPANY_DELETE = 'COMPANY_DELETE',

  // User actions
  USER_VIEW = 'USER_VIEW',
  USER_STATUS_UPDATE = 'USER_STATUS_UPDATE',
  USER_PASSWORD_RESET = 'USER_PASSWORD_RESET',
  USER_BAN = 'USER_BAN',
  USER_UNBAN = 'USER_UNBAN',

  // Plan actions
  PLAN_ASSIGN = 'PLAN_ASSIGN',
  PLAN_UPDATE = 'PLAN_UPDATE',
  PLAN_DELETE = 'PLAN_DELETE',

  // System actions
  SYSTEM_NOTIFICATION = 'SYSTEM_NOTIFICATION',
  SYSTEM_CONFIG_UPDATE = 'SYSTEM_CONFIG_UPDATE',
  SYSTEM_BACKUP = 'SYSTEM_BACKUP',

  // Usage actions
  USAGE_OVERRIDE = 'USAGE_OVERRIDE',
  USAGE_RESET = 'USAGE_RESET',
  QUOTA_ENFORCEMENT = 'QUOTA_ENFORCEMENT',
}

// Target types for admin actions
export enum AdminTargetType {
  COMPANY = 'COMPANY',
  USER = 'USER',
  PLAN = 'PLAN',
  SYSTEM = 'SYSTEM',
  USAGE = 'USAGE',
} 