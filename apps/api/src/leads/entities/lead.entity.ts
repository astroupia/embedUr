import { LeadStatus } from '../constants/lead.constants';

export interface EnrichmentData {
  company?: string;
  title?: string;
  location?: string;
  industry?: string;
  linkedinProfile?: string;
  phone?: string;
  website?: string;
  [key: string]: any;
}

export interface CampaignWithAiPersona {
  id: string;
  name: string;
  aiPersona?: {
    id: string;
    name: string;
    description: string | null;
    prompt: string;
    parameters: any;
  } | null;
}

export class LeadEntity {
  constructor(
    public readonly id: string,
    public readonly fullName: string,
    public readonly email: string,
    public readonly linkedinUrl: string | null,
    public readonly enrichmentData: EnrichmentData | null,
    public readonly verified: boolean,
    public readonly status: LeadStatus,
    public readonly companyId: string,
    public readonly campaignId: string,
    public readonly createdAt: Date,
    public readonly updatedAt: Date,
    public readonly campaign?: CampaignWithAiPersona | null,
  ) {}

  // Business logic methods
  public get score(): number {
    let score = 0;
    
    if (this.verified) score += 10;
    if (this.linkedinUrl) score += 5;
    if (this.enrichmentData && Object.keys(this.enrichmentData).length > 0) score += 15;
    
    // Add score based on status
    switch (this.status) {
      case LeadStatus.INTERESTED:
        score += 30;
        break;
      case LeadStatus.BOOKED:
        score += 50;
        break;
      case LeadStatus.CONTACTED:
        score += 10;
        break;
      case LeadStatus.NOT_INTERESTED:
        score -= 20;
        break;
      case LeadStatus.DO_NOT_CONTACT:
        score -= 50;
        break;
    }
    
    return score;
  }

  public get isQualified(): boolean {
    return this.score >= 20 && this.status !== LeadStatus.DO_NOT_CONTACT;
  }

  public get hasEnrichmentData(): boolean {
    return this.enrichmentData !== null && Object.keys(this.enrichmentData).length > 0;
  }

  public get companyName(): string | null {
    return this.enrichmentData?.company || null;
  }

  public get jobTitle(): string | null {
    return this.enrichmentData?.title || null;
  }

  public get location(): string | null {
    return this.enrichmentData?.location || null;
  }

  public canTransitionTo(newStatus: LeadStatus): boolean {
    const validTransitions: Record<LeadStatus, LeadStatus[]> = {
      [LeadStatus.NEW]: [LeadStatus.CONTACTED, LeadStatus.DO_NOT_CONTACT],
      [LeadStatus.CONTACTED]: [LeadStatus.INTERESTED, LeadStatus.NOT_INTERESTED, LeadStatus.BOOKED, LeadStatus.DO_NOT_CONTACT],
      [LeadStatus.INTERESTED]: [LeadStatus.BOOKED, LeadStatus.NOT_INTERESTED, LeadStatus.DO_NOT_CONTACT],
      [LeadStatus.NOT_INTERESTED]: [LeadStatus.DO_NOT_CONTACT],
      [LeadStatus.BOOKED]: [LeadStatus.NOT_INTERESTED, LeadStatus.DO_NOT_CONTACT],
      [LeadStatus.DO_NOT_CONTACT]: [],
    };

    return validTransitions[this.status].includes(newStatus);
  }

  public static create(
    fullName: string,
    email: string,
    companyId: string,
    campaignId: string,
    linkedinUrl?: string,
  ): LeadEntity {
    return new LeadEntity(
      '', // ID will be generated by the database
      fullName,
      email,
      linkedinUrl || null,
      null,
      false,
      LeadStatus.NEW,
      companyId,
      campaignId,
      new Date(),
      new Date(),
    );
  }
} 