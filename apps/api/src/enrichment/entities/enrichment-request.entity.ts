import { EnrichmentProvider, EnrichmentStatus } from '../constants/enrichment.constants';

export class EnrichmentRequestEntity {
  constructor(
    public readonly id: string,
    public provider: EnrichmentProvider,
    public requestData: Record<string, any>,
    public readonly responseData: Record<string, any> | null,
    public readonly status: EnrichmentStatus,
    public readonly leadId: string,
    public readonly companyId: string,
    public readonly createdAt: Date,
    public readonly updatedAt: Date,
    public readonly errorMessage?: string,
    public readonly retryCount?: number,
    public readonly durationMs?: number,
  ) {}

  // Business logic methods
  public get isCompleted(): boolean {
    return this.status === EnrichmentStatus.SUCCESS || 
           this.status === EnrichmentStatus.FAILED ||
           this.status === EnrichmentStatus.TIMEOUT;
  }

  public get isSuccessful(): boolean {
    return this.status === EnrichmentStatus.SUCCESS;
  }

  public get isFailed(): boolean {
    return this.status === EnrichmentStatus.FAILED || 
           this.status === EnrichmentStatus.TIMEOUT;
  }

  public get canBeRetried(): boolean {
    return this.isFailed && 
           (this.retryCount || 0) < 3 && 
           this.status !== EnrichmentStatus.TIMEOUT;
  }

  public get durationSeconds(): number | null {
    return this.durationMs ? Math.round(this.durationMs / 1000) : null;
  }

  public get hasError(): boolean {
    return this.errorMessage !== undefined && this.errorMessage.length > 0;
  }

  public get providerName(): string {
    const providerNames = {
      [EnrichmentProvider.APOLLO]: 'Apollo',
      [EnrichmentProvider.DROP_CONTACT]: 'DropContact',
      [EnrichmentProvider.CLEARBIT]: 'Clearbit',
    };
    return providerNames[this.provider];
  }

  public static create(
    provider: EnrichmentProvider,
    requestData: Record<string, any>,
    leadId: string,
    companyId: string,
  ): EnrichmentRequestEntity {
    return new EnrichmentRequestEntity(
      '', // ID will be generated by the database
      provider,
      requestData,
      null,
      EnrichmentStatus.PENDING,
      leadId,
      companyId,
      new Date(),
      new Date(),
      undefined,
      0,
      undefined,
    );
  }

  public withStatus(
    status: EnrichmentStatus,
    responseData?: Record<string, any>,
    errorMessage?: string,
  ): EnrichmentRequestEntity {
    const endTime = this.isCompleted ? new Date() : new Date();
    const durationMs = endTime && this.createdAt 
      ? endTime.getTime() - this.createdAt.getTime() 
      : this.durationMs;

    return new EnrichmentRequestEntity(
      this.id,
      this.provider,
      this.requestData,
      responseData || this.responseData,
      status,
      this.leadId,
      this.companyId,
      this.createdAt,
      endTime,
      errorMessage,
      this.retryCount,
      durationMs,
    );
  }

  public withRetry(): EnrichmentRequestEntity {
    return new EnrichmentRequestEntity(
      this.id,
      this.provider,
      this.requestData,
      this.responseData,
      EnrichmentStatus.PENDING,
      this.leadId,
      this.companyId,
      this.createdAt,
      new Date(),
      undefined,
      (this.retryCount || 0) + 1,
      undefined,
    );
  }
} 