export class UsageMetricEntity {
  constructor(
    public readonly id: string,
    public readonly metricName: string,
    public readonly count: number,
    public readonly period: string,
    public readonly companyId: string,
    public readonly recordedAt: Date,
  ) {}

  // Business logic methods
  public get isCurrentPeriod(): boolean {
    const today = new Date();
    const currentPeriod = UsageMetricEntity.formatPeriod(today);
    return this.period === currentPeriod;
  }

  public get isOverLimit(): boolean {
    // This will be implemented with plan limits
    return false;
  }

  public get periodType(): 'daily' | 'monthly' | 'yearly' {
    if (this.period.length === 10) return 'daily'; // YYYY-MM-DD
    if (this.period.length === 7) return 'monthly'; // YYYY-MM
    if (this.period.length === 4) return 'yearly'; // YYYY
    return 'daily';
  }

  public static create(
    metricName: string,
    companyId: string,
    count: number = 1,
    period?: string,
  ): UsageMetricEntity {
    const currentPeriod = period || UsageMetricEntity.formatPeriod(new Date());
    
    return new UsageMetricEntity(
      '', // ID will be generated by database
      metricName,
      count,
      currentPeriod,
      companyId,
      new Date(),
    );
  }

  public increment(amount: number = 1): UsageMetricEntity {
    return new UsageMetricEntity(
      this.id,
      this.metricName,
      this.count + amount,
      this.period,
      this.companyId,
      this.recordedAt,
    );
  }

  public withCount(count: number): UsageMetricEntity {
    return new UsageMetricEntity(
      this.id,
      this.metricName,
      count,
      this.period,
      this.companyId,
      this.recordedAt,
    );
  }

  private static formatPeriod(date: Date): string {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
  }
}

// Standard metric names for consistency across the codebase
export enum MetricName {
  LEADS_CREATED = 'LEADS_CREATED',
  WORKFLOWS_EXECUTED = 'WORKFLOWS_EXECUTED',
  AI_INTERACTIONS = 'AI_INTERACTIONS',
  EMAILS_SENT = 'EMAILS_SENT',
  ENRICHMENT_REQUESTS = 'ENRICHMENT_REQUESTS',
  REPLIES_CLASSIFIED = 'REPLIES_CLASSIFIED',
  CAMPAIGNS_CREATED = 'CAMPAIGNS_CREATED',
  BOOKINGS_CREATED = 'BOOKINGS_CREATED',
  API_CALLS = 'API_CALLS',
}

// Metric descriptions for documentation
export const METRIC_DESCRIPTIONS: Record<MetricName, string> = {
  [MetricName.LEADS_CREATED]: 'Total leads created by the company',
  [MetricName.WORKFLOWS_EXECUTED]: 'Total workflows executed by the company',
  [MetricName.AI_INTERACTIONS]: 'Total AI operations performed (drafts, analysis, etc.)',
  [MetricName.EMAILS_SENT]: 'Total emails sent via campaigns',
  [MetricName.ENRICHMENT_REQUESTS]: 'Total enrichment API calls made',
  [MetricName.REPLIES_CLASSIFIED]: 'Total replies analyzed by AI',
  [MetricName.CAMPAIGNS_CREATED]: 'Total campaigns created by the company',
  [MetricName.BOOKINGS_CREATED]: 'Total bookings created by the company',
  [MetricName.API_CALLS]: 'Total API calls made by the company',
}; 