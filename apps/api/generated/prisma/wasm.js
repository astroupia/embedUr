
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
Prisma.prismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.CompanyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  schemaName: 'schemaName',
  status: 'status',
  planId: 'planId',
  industry: 'industry',
  location: 'location',
  website: 'website',
  description: 'description',
  logoUrl: 'logoUrl',
  bannerUrl: 'bannerUrl',
  employees: 'employees',
  revenue: 'revenue',
  linkedinUsername: 'linkedinUsername',
  twitterUsername: 'twitterUsername',
  facebookUsername: 'facebookUsername',
  instagramUsername: 'instagramUsername',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  firstName: 'firstName',
  lastName: 'lastName',
  password: 'password',
  role: 'role',
  companyId: 'companyId',
  linkedinUrl: 'linkedinUrl',
  profileUrl: 'profileUrl',
  twitterUsername: 'twitterUsername',
  facebookUsername: 'facebookUsername',
  instagramUsername: 'instagramUsername',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  maxLeads: 'maxLeads',
  maxWorkflows: 'maxWorkflows',
  priceCents: 'priceCents',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.APIKeyScalarFieldEnum = {
  id: 'id',
  key: 'key',
  name: 'name',
  scope: 'scope',
  active: 'active',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GlobalSettingsScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SystemNotificationScalarFieldEnum = {
  id: 'id',
  message: 'message',
  level: 'level',
  read: 'read',
  companyId: 'companyId',
  createdAt: 'createdAt'
};

exports.Prisma.LeadScalarFieldEnum = {
  id: 'id',
  fullName: 'fullName',
  email: 'email',
  linkedinUrl: 'linkedinUrl',
  enrichmentData: 'enrichmentData',
  verified: 'verified',
  status: 'status',
  companyId: 'companyId',
  campaignId: 'campaignId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CampaignScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  status: 'status',
  aiPersonaId: 'aiPersonaId',
  workflowId: 'workflowId',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AIPersonaScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  prompt: 'prompt',
  parameters: 'parameters',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmailLogScalarFieldEnum = {
  id: 'id',
  status: 'status',
  sentAt: 'sentAt',
  metadata: 'metadata',
  leadId: 'leadId',
  campaignId: 'campaignId',
  companyId: 'companyId'
};

exports.Prisma.ReplyScalarFieldEnum = {
  id: 'id',
  content: 'content',
  classification: 'classification',
  handledBy: 'handledBy',
  leadId: 'leadId',
  emailLogId: 'emailLogId',
  companyId: 'companyId',
  source: 'source',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.BookingScalarFieldEnum = {
  id: 'id',
  calendlyLink: 'calendlyLink',
  scheduledTime: 'scheduledTime',
  status: 'status',
  leadId: 'leadId',
  companyId: 'companyId',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WorkflowScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  n8nWorkflowId: 'n8nWorkflowId',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WorkflowExecutionScalarFieldEnum = {
  id: 'id',
  status: 'status',
  triggeredBy: 'triggeredBy',
  startTime: 'startTime',
  endTime: 'endTime',
  inputData: 'inputData',
  outputData: 'outputData',
  durationMs: 'durationMs',
  leadId: 'leadId',
  workflowId: 'workflowId',
  companyId: 'companyId'
};

exports.Prisma.AIInteractionScalarFieldEnum = {
  id: 'id',
  type: 'type',
  inputData: 'inputData',
  outputData: 'outputData',
  workflowExecutionId: 'workflowExecutionId',
  companyId: 'companyId',
  createdAt: 'createdAt'
};

exports.Prisma.EnrichmentRequestScalarFieldEnum = {
  id: 'id',
  provider: 'provider',
  requestData: 'requestData',
  responseData: 'responseData',
  status: 'status',
  leadId: 'leadId',
  companyId: 'companyId',
  errorMessage: 'errorMessage',
  retryCount: 'retryCount',
  durationMs: 'durationMs',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UsageMetricScalarFieldEnum = {
  id: 'id',
  metricName: 'metricName',
  count: 'count',
  period: 'period',
  companyId: 'companyId',
  recordedAt: 'recordedAt'
};

exports.Prisma.AdminActionLogScalarFieldEnum = {
  id: 'id',
  action: 'action',
  targetType: 'targetType',
  targetId: 'targetId',
  details: 'details',
  performedBy: 'performedBy',
  timestamp: 'timestamp'
};

exports.Prisma.WebhookEventScalarFieldEnum = {
  id: 'id',
  source: 'source',
  payload: 'payload',
  companyId: 'companyId',
  receivedAt: 'receivedAt'
};

exports.Prisma.AuditTrailScalarFieldEnum = {
  id: 'id',
  entity: 'entity',
  entityId: 'entityId',
  action: 'action',
  performedById: 'performedById',
  changes: 'changes',
  companyId: 'companyId',
  timestamp: 'timestamp'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  refreshToken: 'refreshToken',
  ip: 'ip',
  userAgent: 'userAgent',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.EmailVerificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.PasswordResetScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  expiresAt: 'expiresAt',
  used: 'used',
  createdAt: 'createdAt'
};

exports.Prisma.TargetAudienceTranslatorScalarFieldEnum = {
  id: 'id',
  inputFormat: 'inputFormat',
  targetAudienceData: 'targetAudienceData',
  structuredData: 'structuredData',
  config: 'config',
  leads: 'leads',
  enrichmentSchema: 'enrichmentSchema',
  interpretedCriteria: 'interpretedCriteria',
  reasoning: 'reasoning',
  confidence: 'confidence',
  status: 'status',
  errorMessage: 'errorMessage',
  companyId: 'companyId',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.CompanyStatus = exports.$Enums.CompanyStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SUSPENDED: 'SUSPENDED',
  PENDING_DELETION: 'PENDING_DELETION'
};

exports.UserRole = exports.$Enums.UserRole = {
  ADMIN: 'ADMIN',
  SUPER_ADMIN: 'SUPER_ADMIN',
  MEMBER: 'MEMBER',
  READ_ONLY: 'READ_ONLY'
};

exports.SystemNotificationLevel = exports.$Enums.SystemNotificationLevel = {
  INFO: 'INFO',
  WARNING: 'WARNING',
  ERROR: 'ERROR',
  SUCCESS: 'SUCCESS'
};

exports.LeadStatus = exports.$Enums.LeadStatus = {
  NEW: 'NEW',
  CONTACTED: 'CONTACTED',
  INTERESTED: 'INTERESTED',
  NOT_INTERESTED: 'NOT_INTERESTED',
  BOOKED: 'BOOKED',
  DO_NOT_CONTACT: 'DO_NOT_CONTACT'
};

exports.CampaignStatus = exports.$Enums.CampaignStatus = {
  DRAFT: 'DRAFT',
  ACTIVE: 'ACTIVE',
  PAUSED: 'PAUSED',
  COMPLETED: 'COMPLETED',
  ARCHIVED: 'ARCHIVED'
};

exports.EmailStatus = exports.$Enums.EmailStatus = {
  SENT: 'SENT',
  DELIVERED: 'DELIVERED',
  OPENED: 'OPENED',
  CLICKED: 'CLICKED',
  BOUNCED: 'BOUNCED',
  FAILED: 'FAILED'
};

exports.ReplyClassification = exports.$Enums.ReplyClassification = {
  INTERESTED: 'INTERESTED',
  NOT_INTERESTED: 'NOT_INTERESTED',
  AUTO_REPLY: 'AUTO_REPLY',
  UNSUBSCRIBE: 'UNSUBSCRIBE',
  QUESTION: 'QUESTION',
  NEUTRAL: 'NEUTRAL'
};

exports.ReplySource = exports.$Enums.ReplySource = {
  SMARTLEAD: 'SMARTLEAD',
  MANUAL: 'MANUAL',
  WEBHOOK: 'WEBHOOK'
};

exports.BookingStatus = exports.$Enums.BookingStatus = {
  BOOKED: 'BOOKED',
  RESCHEDULED: 'RESCHEDULED',
  CANCELLED: 'CANCELLED',
  COMPLETED: 'COMPLETED'
};

exports.WorkflowType = exports.$Enums.WorkflowType = {
  TARGET_AUDIENCE_TRANSLATOR: 'TARGET_AUDIENCE_TRANSLATOR',
  LEAD_ENRICHMENT: 'LEAD_ENRICHMENT',
  EMAIL_SEQUENCE: 'EMAIL_SEQUENCE',
  LEAD_ROUTING: 'LEAD_ROUTING'
};

exports.AIInteractionType = exports.$Enums.AIInteractionType = {
  DRAFT_EMAIL: 'DRAFT_EMAIL',
  REPLY_ANALYSIS: 'REPLY_ANALYSIS'
};

exports.EnrichmentProvider = exports.$Enums.EnrichmentProvider = {
  APOLLO: 'APOLLO',
  DROP_CONTACT: 'DROP_CONTACT',
  CLEARBIT: 'CLEARBIT',
  N8N: 'N8N'
};

exports.WebhookSource = exports.$Enums.WebhookSource = {
  SMARTLEAD: 'SMARTLEAD',
  CALENDLY: 'CALENDLY',
  N8N: 'N8N'
};

exports.InputFormat = exports.$Enums.InputFormat = {
  FREE_TEXT: 'FREE_TEXT',
  STRUCTURED_JSON: 'STRUCTURED_JSON',
  CSV_UPLOAD: 'CSV_UPLOAD',
  FORM_INPUT: 'FORM_INPUT'
};

exports.Prisma.ModelName = {
  Company: 'Company',
  User: 'User',
  Plan: 'Plan',
  APIKey: 'APIKey',
  GlobalSettings: 'GlobalSettings',
  SystemNotification: 'SystemNotification',
  Lead: 'Lead',
  Campaign: 'Campaign',
  AIPersona: 'AIPersona',
  EmailLog: 'EmailLog',
  Reply: 'Reply',
  Booking: 'Booking',
  Workflow: 'Workflow',
  WorkflowExecution: 'WorkflowExecution',
  AIInteraction: 'AIInteraction',
  EnrichmentRequest: 'EnrichmentRequest',
  UsageMetric: 'UsageMetric',
  AdminActionLog: 'AdminActionLog',
  WebhookEvent: 'WebhookEvent',
  AuditTrail: 'AuditTrail',
  Session: 'Session',
  EmailVerification: 'EmailVerification',
  PasswordReset: 'PasswordReset',
  TargetAudienceTranslator: 'TargetAudienceTranslator'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
